{"version":3,"sources":["components/Sidebar/Sidebar.js","components/WeatherWrapper/Weather/WeatherIcon/WeatherIcon.js","components/WeatherWrapper/Weather/Temperature/Temperature.js","components/WeatherWrapper/Weather/Precipitation/Precipitation.js","components/WeatherWrapper/Weather/Pressure/Pressure.js","components/WeatherWrapper/Weather/WindBearing/WindBearing.js","components/WeatherWrapper/Weather/Weather.js","components/WeatherWrapper/WeatherWrapper.js","App.js","serviceWorker.js","index.js","components/WeatherWrapper/WeatherWrapper.module.scss","components/Sidebar/_Sidebar.module.scss"],"names":["Sidebar","className","styles","sidebar","map","name","sidebar__container","style","height","WeatherIcon","renderIcons","propsIcon","console","log","this","props","icon","Component","CustomizedLabel","x","y","stroke","value","dy","fill","fontSize","textAnchor","PureComponent","Temperature","data","margin","top","bottom","left","right","width","type","dataKey","dot","strokeWidth","position","content","dx","Precipitation","barCategoryGap","barGap","Pressure","WindBearing","degToDirection","num","Math","round","transform","padding","viewBox","points","Weather","temps","temperature","temp","precips","precipIntensity","toFixed","pressureRow","pressure","days","slidesPerView","navigation","nextEl","prevEl","hour","index","class","key","id","Date","time","getDay","getHours","windBearing","windSpeed","WeatherWrapper","state","hourlyWeather","isLoading","error","fetch","then","response","json","setState","hourly","catch","err","set","loader","weather__main_","App","process","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.45334906.chunk.js","sourcesContent":["import React from \"react\";\nimport styles from \"./_Sidebar.module.scss\";\n\nfunction Sidebar() {\n  const containerNames = [\n    \"dzień\",\n    \"godzina\",\n    \"prognoza\",\n    \"temperatura\",\n    \"opady\",\n    \"kierunek wiatru\",\n    \"prędkość wiatru\",\n    \"ciśnienie\",\n  ];\n  return (\n    <aside className={styles.sidebar}>\n      {containerNames.map((name) => {\n        return (\n          <div\n            className={styles.sidebar__container}\n            style={{\n              height: name === \"dzień\" ? \"50px\" : \"auto\",\n            }}\n          >\n            <p>{name}</p>\n          </div>\n        );\n      })}\n    </aside>\n  );\n}\n\nexport default Sidebar;\n","import React, { Component } from \"react\";\nimport \"./WeatherIcon.scss\"\n\nclass WeatherIcon extends Component {\n  renderIcons = (propsIcon) => {\n    let icon = propsIcon;\n\n    switch (icon) {\n      case \"clear-day\":\n        return 'day-sunny';\n\n      case \"clear-night\":\n        return 'night-clear';\n\n      case \"rain\":\n        return 'rain';\n\n      case \"snow\":\n        return 'snow';\n\n      case \"sleet\":\n        return 'sleet';\n\n      case \"wind\":\n        return 'windy';\n\n      case \"fog\":\n        return 'fog';\n\n      case \"cloudy\":\n        return 'cloud';\n\n      case \"partly-cloudy-day\":\n        return 'day-cloudy';\n\n      case \"partly-cloudy-night\":\n        return 'night-cloudy';\n\n      default:\n        console.log(\"icon\");\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"weather__icon\">\n        <i className={`wi wi-${this.renderIcons(this.props.icon)}`}></i>\n      </div>\n    );\n  }\n}\nexport default WeatherIcon;\n","import React, { Component, PureComponent } from \"react\";\nimport { LineChart, Line, LabelList } from \"recharts\";\n\nclass CustomizedLabel extends PureComponent {\n  render() {\n    const { x, y, stroke, value } = this.props;\n\n    return (\n      <text\n        x={x}\n        y={y}\n        dy={-10}\n        fill={stroke}\n        fontSize={20}\n        textAnchor=\"middle\"\n      >\n        {value} °\n      </text>\n    );\n  }\n}\n\nclass Temperature extends Component {\n  render() {\n    const { data } = this.props;\n    return (\n      <LineChart\n        data={data}\n        margin={{\n          top: 90,\n          bottom: 5,\n          left: 50,\n          right: 15,\n        }}\n        width={4925}\n        height={100}\n      >\n        <Line\n          type=\"monotone\"\n          dataKey=\"temp\"\n          stroke=\"#ffff00\"\n          dot={{ stroke: \"black\", strokeWidth: 1 }}\n        >\n          <LabelList\n            dataKey=\"temp\"\n            position=\"top\"\n            content={<CustomizedLabel />}\n          />\n        </Line>\n      </LineChart>\n    );\n  }\n}\nexport default Temperature;\n","import React, { Component, PureComponent } from \"react\";\nimport { BarChart, Bar, LabelList, ResponsiveContainer } from \"recharts\";\nclass CustomizedLabel extends PureComponent {\n  render() {\n    const { x, y, stroke, value } = this.props;\n\n    return (\n      <text\n        x={x}\n        y={y}\n        dy={-5}\n        dx={25}\n        fill={stroke}\n        fontSize={12}\n        textAnchor=\"start\"\n      >\n        {value} mm\n      </text>\n    );\n  }\n}\n\nclass Precipitation extends Component {\n  render() {\n    const { data } = this.props;\n    return (\n      <div style={{ height: \"100px\", width: \"4950px\" }}>\n        {/* <ResponsiveContainer width=\"100%\" height=\"200px\"> */}\n        <BarChart\n          width={4950}\n          height={85}\n          margin={{\n            top: 25,\n            bottom: 0,\n            left: 0,\n          }}\n          data={data}\n          barCategoryGap={0}\n        >\n          <Bar dataKey=\"precipIntensity\" fill=\"#3d9fd0\" barGap={0}>\n            <LabelList\n              dataKey=\"precipIntensity\"\n              position=\"top\"\n              content={<CustomizedLabel />}\n            />\n          </Bar>\n        </BarChart>\n        {/* </ResponsiveContainer> */}\n      </div>\n    );\n  }\n}\nexport default Precipitation;\n","import React, { Component, PureComponent } from \"react\";\nimport { LineChart, Line, LabelList } from \"recharts\";\n\nclass CustomizedLabel extends PureComponent {\n  render() {\n    const { x, y, stroke, value } = this.props;\n\n    return (\n      <text\n        x={x}\n        y={y}\n        dy={-10}\n        fill={stroke}\n        fontSize={16}\n        textAnchor=\"middle\"\n      >\n        {value} hPa\n      </text>\n    );\n  }\n}\nclass Pressure extends Component {\n  render() {\n    const { data } = this.props;\n    return (\n      <LineChart\n        width={4950}\n        height={100}\n        data={data}\n        margin={{\n          top: 95,\n          right: 40,\n          left: 40,\n          bottom: 5,\n        }}\n      >\n        <Line\n          type=\"monotone\"\n          dataKey=\"pressure\"\n          stroke=\"#000\"\n          dot={{ stroke: \"black\", strokeWidth: 1 }}\n        >\n          <LabelList\n            dataKey=\"pressure\"\n            position=\"top\"\n            content={<CustomizedLabel />}\n          />\n        </Line>\n      </LineChart>\n    );\n  }\n}\nexport default Pressure;\n","import React, { Component } from \"react\";\n\nclass WindBearing extends Component {\n  degToDirection = (num) => {\n    let value = Math.round(num / 45);\n    let nameDirections = [\n      \"Północny\",\n      \"Pn.-Zach.\",\n      \"Zachodni\",\n      \"Pd.-Zach.\",\n      \"Południowy\",\n      \"Pd.-Wsch.\",\n      \"Wschodni\",\n      \"Pn.-Wsch.\",\n    ];\n    return nameDirections[value % 8];\n  };\n\n  render() {\n    const { data } = this.props;\n    return (\n      <>\n        <div\n          style={{\n            transform: `rotate(${data}deg)`,\n            height: 20,\n            width: 20,\n            padding: 15,\n          }}\n        >\n          <svg viewBox=\"0 0 16 16\">\n            <polygon\n              points=\"8,0.409 2.35,15.486 8,12.396 13.65,15.486\"\n            ></polygon>\n          </svg>\n        </div>\n\n        <small>{this.degToDirection(data)}</small>\n      </>\n    );\n  }\n}\nexport default WindBearing;\n","import React, { Component } from \"react\";\nimport Swiper from \"react-id-swiper\";\n\n\nimport './Weather.scss'\nimport WeatherIcon from \"./WeatherIcon/WeatherIcon\";\nimport Temperature from \"./Temperature/Temperature\";\nimport Precipitation from \"./Precipitation/Precipitation\";\nimport Pressure from \"./Pressure/Pressure\";\nimport WindBearing from \"./WindBearing/WindBearing\";\n\nclass Weather extends Component {\n  render() {\n    const { data } = this.props;\n\n    const temps = this.props.data.map(({ temperature }) => {\n      let tempRound = Math.round(temperature);\n      return { name: \"temperatura\", temp: tempRound };\n    });\n\n    const precips = this.props.data.map(({ precipIntensity }) => {\n      let precipFixed = precipIntensity.toFixed(1);\n      return { name: \"opad\", precipIntensity: precipFixed };\n    });\n\n    const pressureRow = this.props.data.map(({ pressure }) => {\n      return { name: \"temperatura\", pressure: pressure };\n    });\n\n    const days = [\"niedziela\", \"poniedziałek\", \"wtorek\", \"środa\", \"czwartek\", \"piątek\", \"sobota\", ];\n    const params = {\n      width: 1000,\n      slidesPerView: \"auto\",\n      navigation: {\n        nextEl: '.swiper-button-next',\n        prevEl: '.swiper-button-prev'\n      }\n\n    };\n    return (\n      <div style={{ position: 'relative' }}>\n        <Swiper {...params} style={{ width: \"400px\", height: \"400px\" }}>\n          {data.map((hour, index) => {\n            return (\n              <div class=\"max-width: 200px !important;\">\n                <div className=\"col\" key={index} id={index}>\n                  <div className=\"item item--day\">\n                    {days[new Date(hour.time * 1000).getDay()]}\n                  </div>\n\n                  <div className=\"item item--hour\">\n                    <p>{new Date(hour.time * 1000).getHours() + \":00\"}</p>\n                  </div>\n\n                  <div className=\"item item--icon\">\n                    <WeatherIcon icon={hour.icon} />\n                  </div>\n\n                  {index === 0 ? (\n                    <div className=\"item\">\n                      <Temperature data={temps}></Temperature>\n                    </div>\n                  ) : (\n                    <div className=\"item empty-slot\"></div>\n                  )}\n\n                  <div className=\"item\">\n                    {index === 0 ? (\n                      <Precipitation data={precips} />\n                    ) : (\n                      <div className=\"empty-slot\"></div>\n                    )}\n                  </div>\n                  <div className=\"item item--wind\">\n                    <WindBearing data={hour.windBearing}></WindBearing>\n                  </div>\n                  <div className=\"item item--windspeed\">\n                    <p>\n                      Słaby <br /> //\n                      {Math.round(hour.windSpeed)} km/h\n                    </p>\n                  </div>\n                  <div className=\"item item--pressure\">\n                    {index === 0 ? (\n                      <Pressure data={pressureRow}></Pressure>\n                    ) : (\n                      <div className=\"empty-slot\"></div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </Swiper>\n        swiper\n      </div>\n    );\n  }\n}\nexport default Weather;\n","import React, { Component } from \"react\";\n\nimport Weather from \"./Weather/Weather\";\nimport styles from './WeatherWrapper.module.scss'\n\nconst API =\n  \"https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/944c9a45b3172504520c7e1bd197185f/42.3601,-71.0589?lang=pl&units=ca\";\n\nclass WeatherWrapper extends Component {\n  state = {\n    hourlyWeather: null,\n    isLoading: true,\n    error: null\n  };\n\n  componentDidMount() {\n    fetch(API)\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        this.setState({\n          hourlyWeather: data.hourly.data,\n          isLoading: false,\n        });\n      })\n      .catch((err) => {\n        console.log(\"error:\" + err);\n        this.set({error: \"Błąd\" + err})\n      });\n  }\n  render() {\n    const { hourlyWeather, isLoading } = this.state;\n\n    if (isLoading) {\n      return (\n        <div\n          className={styles.loader}\n        >\n          <p>Ładowanie danych...</p>\n        </div>\n      );\n    }\n    if (isLoading) {\n      return (\n        <div className={styles.loader}>\n          <p>Ładowanie danych...</p>\n        </div>\n      );\n    }\n    return (\n        <div className={styles.weather__main_}>\n          <Weather data={hourlyWeather}></Weather>\n        </div>\n    );\n  }\n}\n\nexport default WeatherWrapper;\n","import React from \"react\";\nimport \"./App.scss\";\n// import \"react-id-swiper/lib/styles/css/swiper.css\";\nimport Sidebar from \"./components/Sidebar/Sidebar\";\n\nimport WeatherWrapper from \"./components/WeatherWrapper/WeatherWrapper\";\nfunction App() {\n  console.log(process.env)\n  return (\n    <div className=\"App\">\n      <Sidebar />\n      <WeatherWrapper />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"WeatherWrapper_loader__2siV8\",\"weather__main\":\"WeatherWrapper_weather__main__3tzPr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"_Sidebar_sidebar__2W8eg\",\"sidebar__container\":\"_Sidebar_sidebar__container__1QU69\"};"],"sourceRoot":""}